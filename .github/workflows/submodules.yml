name: Update submodules and add new ones
on:
  workflow_dispatch:
  schedule:
    - cron: 0 */1 * * *
jobs:
  submodule:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: recursive
      - name: Submodule update
        run: |
          mainRepo="ruddnev/itmo"
          headerPrefix="###"
          git config --global user.name "GitHub Action"
          git config --global user.email "noreply@github.com"
          orgName=$(echo $mainRepo | tr -d "/")
          grep1="\(https:\/\/github\.com\/${orgName}\/[a-zA-Z0-9\-]{1,}(\/tree\/main)?\)"
          grep2="https:\/\/github\.com\/${orgName}\/[a-zA-Z0-9\-]{1,}$"
          curl -H 'Cache-Control: no-cache, no-store' -s https://raw.githubusercontent.com/${mainRepo}/main/README.md | grep -i -o -P "$grep1" | grep -o -P 's[0-9]-[a-zA-Z0-9]{1,}-[a-zA-Z0-9]{1,}' | sort > readmeRepos.tmp
          curl -H 'Cache-Control: no-cache, no-store' -s https://raw.githubusercontent.com/${mainRepo}/main/.gitmodules | grep -i -o -P "$grep2" | grep -o -P 's[0-9]-[a-zA-Z0-9]{1,}-[a-zA-Z0-9]{1,}' | sort > submoduleRepos.tmp
          comm -13 submoduleRepos.tmp readmeRepos.tmp > newRepos.tmp
          newReposCount=$(cat newRepos.tmp | wc -l)
          if [ "$newReposCount" -gt "0" ]; then cat newRepos.tmp | while read line; do if [ -z "$line" ]; then echo line is empty!; else semester=${line: 1:1}; lab=$(echo $line | cut -d '-' -f 3); ordinals=$(case "$semester" in *1[0-9] | *[04-9]) echo th;; *1) echo st;; *2) echo nd;; *3) echo rd;; esac); labLine=$(grep -n "${line}" README.md | cut -d : -f 1); cat README.md | while read readmeLine; do if [[ "$readmeLine" =~ ^$headerPrefix ]]; then lastHeaderLine=$(grep -n "$readmeLine" README.md | cut -d : -f 1); lastHeader=${readmeLine}; if [ "$lastHeaderLine" -gt "$labLine" ]; then break; fi; echo $lastHeader > header.tmp; fi; done; fi; realHeader=$(cat header.tmp); header=$(echo ${realHeader//"#"/} | awk '{$1=$1};1'); partheader=$(echo ${header//:/} | sed -e 's/([^()]*)//g' | awk '{$1=$1};1'); header=$(echo ${partheader// /-} | grep -o -P '[A-Za-z0-9-]+' | tr -d '\n' | sed -e 's/\(.*\)/\L\1/'); git submodule add -b main https://github.com/${orgName}/${line} ${semester}${ordinals}-semester/${header}/${lab}; git submodule update --init --recursive; git add ${semester}${ordinals}-semester/${header}/${lab}/\*; git add .gitmodules; git commit -m "automatically adding ${header}/${lab} as a submodule"; done; fi
          touch newLastCommits.tmp
          cat submoduleRepos.tmp | while read repoName; do if [ -z "$repoName" ]; then echo line is empty!; else result=$(curl -s -H "Accept: application/vnd.github.VERSION.sha" "https://api.github.com/repos/${orgName}/${repoName}/commits/main"); echo "${repoName}: ${result}" >> newLastCommits.tmp; fi; done; 
          sort -o sortedNewLastCommits.tmp newLastCommits.tmp; rm newLastCommits.tmp
          newLastCommits="sortedNewLastCommits.tmp"
          lastCommits=".github/workflows/lastCommits.txt"
          lastCommitsCount=0
          if [ -f "$lastCommits" ]; then lastCommitsCount=$(cat $lastCommits | wc -l); fi
          if [ "$lastCommitsCount" -gt "0" ]; then if cmp --silent -- "$lastCommits" "$newLastCommits"; then echo "no changes"; else git submodule update --recursive --remote; cp $newLastCommits $lastCommits; git commit -am "making submodules keep track of main branch"; git push; fi; else cp $newLastCommits $lastCommits; git add $lastCommits; git commit -m "updating last commits";  git push; fi

